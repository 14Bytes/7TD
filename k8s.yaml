---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: ${APP_NAME}
  namespace: ${REGISTRY_NAMESPACE}
  labels:
    app: ${APP_NAME}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${APP_NAME}
  template:
    metadata:
      labels:
        app: ${APP_NAME}
    spec:
      volumes:
        - name: host-time
          hostPath:
            path: /etc/localtime
            type: ''
        - name: localdata
          emptyDir: {}
        - name: nginx-conf
          configMap:
            name: nginx-frontend
            items:
              - key: nginx.conf
                path: nginx.conf
            defaultMode: 420
      initContainers:
        - name: dist-init
          image: ${REGISTRY}/${REGISTRY_NAMESPACE}/${APP_NAME}:${VERSION_NUMBER}
          command:
            - sh
          args:
            - '-c'
            - cp -r /dist/* /localdata
          resources: {}
          volumeMounts:
            - name: host-time
              readOnly: true
              mountPath: /etc/localtime
            - name: localdata
              mountPath: /localdata
          imagePullPolicy: IfNotPresent
      containers:
        - name: nginx
          image: 'nginx:1.22.0'
          ports:
            - name: http-80
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: host-time
              readOnly: true
              mountPath: /etc/localtime
            - name: localdata
              mountPath: /usr/share/nginx/html
            - name: nginx-conf
              readOnly: true
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: harbor-registry-secret
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
kind: Service
apiVersion: v1
metadata:
  name: ${APP_NAME}-svc
  namespace: ${REGISTRY_NAMESPACE}
  labels:
    app: ${APP_NAME}-svc
spec:
  ports:
    - name: http-80
      protocol: TCP
      port: 80
      targetPort: 80
  selector:
    app: ${APP_NAME}
  type: NodePort
  sessionAffinity: None
  externalTrafficPolicy: Cluster
